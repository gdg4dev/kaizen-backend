so we all have wondered this at some point and especially when we started using computers and browsing the internet that what really happens when we type a URL into our browser in this video we start from absolute scratch and go on a journey to understand the most common components from a 10,000 foot view answering this very question so let's begin if you love diving deep you'll find this amusing I conduct super practical courses with a no-nonsense approach aimed at making you a better engineer and help you Ace your career the course coures will reignite your engineering curiosity and make you a lifelong learner some of my most popular courses are on system design for both beginners and mid senior Engineers all the details about the courses like curriculum prerequisites testimonials and FAQs can be found on the respective course pages and I have linked all of them in the description down below so do check them out and now let's head back to the video so let's start with answering a very simple question what constitutes a URL a URL typically looks like this https col www.google.com API search Q is equal to home now this URL constitutes of many fragments first is https which is called as a scheme this tells that I want to connect to this domain over this specific protocol it could be HTTP https WS WSS and whatnot right now this is the domain that I want to connect to so I want to reach out to www.google.com then I say that on this domain I I'm looking for/ API search and this is the additional metadata that I'm passing the key value pair these are called query parameters now when I type this URL in my browser the first thing that happens is DNS resolution now why do we need DNS resolution for one machine to connect to any other machine we require IP address but we possibly cannot remember like it is very easy for us to remember google.com versus the IP address 1753 21.2 53 right so because this is human readable there are the domain names were introduced to make it easier for us to remember what we want want to try to connect Twitter Facebook LinkedIn and whatnot so this process of converting the domain name to the IP address is the DNS resolution process now this is what your browser or your machine requires to connect to that other server the Google server now how does this process look like now this process looks like with this process called DNS lookup that I'm trying to look up for DNS across the stack eventually I would go to the DNS server to get the IP address so browser gets the actual IP address against the D against the domain name from a root DNS server and now root DNS server is the a server of all information and then it is broken into regionalized for TLD which is combiz doin and all and so on and so forth so when the domain name resolution happens this process is slightly complicated and one pointer in subsequent videos we'll be building our own DNS server so that we understand this protocol really well and understand how it functions and how you can build your own server from scratch right but until then for now assume that for a domain name we would try to get the IP address against it now because the IP address for google.com is very unlikely to change often what happens is browser typically caches this information so that it does not have to make this call again and again to get the IP address for the domain name then the operating system also caches this information on behalf of the computer it caches this information so that when we do the lookup if OS has it we'll average that otherwise we will go on a process to do DNS resolution which involves going through all sorts of machines on the way where you do domain name resolution root server TLD regionalized and whatnot to get this information and this information is again cached across all the layers so that the subsequent request are served faster and this is just resolving from the domain name to the IP address that's it now once the resolution is complete then what happens your browser now has the IP address to connect to right now browser is free to establish the connection which is where because we are using HTTP here the connection that it is used is the TCP connection so browser establishes the TCP connection with the IP address mentioned which is of google.com 1753 21253 right now here this is not a single server but in general this is basically a huge set of machines with load balances and API gateways and servers which we'll cover in the future sessions but it opens up a massive pendas box in itself but the core idea is your browser can now establish the connection with this machine internally it might go to some other machines across multiple layers we not worry about that as of today now brow establishes the TCP connections and now it is ready to fire the request that hey I'm looking for this do you have anything so here the next step that the browser does once the TCP connection is established is that it sends the request now what does sending the request means here we chose to make an HTTP call now HTTP call is basically on this TCP connection on what format I'm sending the data that my receiving server understands so here the protocol we are leveraging is HTTP so your client understands how to form this HTTP message and your server understands how to interpret the HTTP message so here let's say I'm going to make a call to/ Api sech Q is equal to home so my HTTP packet looks like this get Space / API search qal to home http/1.1 this is verb HTTP verb the URL I want to hit then the HTTP protocol which we would want to use coming from this host and I'm asking the connections to keep now these are called headers which is an additional metadata information we are sending with the request and this is the actual request that what we are looking for because browser you're typing the URL and hitting it this request is by default get request where you are requesting for browser that hey this browser is requesting a get from the server get on this URL right and we can pass in additional information if we like right now this is the this is the actual message your browser creat and sends over the TCP where your server receives the message as soon as it receives the message it basically it basically passes the message extracts the information now here few thing please watch one of my video I link it in the description also that why protocol exist here we said that we will use HTTP protocol but what exactly a protocol is I have a very detailed nice video on that on what HTTP protocol is and what in general a protocol is I would highly recommend you give it a watch right now here this is the protocol specification in which a browser creates a message and server understands it and all now when server like this message was sent to the server when server received this message what server does server passes the message understands what you want from which URL or what resource you're looking for what protocol and what other additional meta information once it passes the message it understands the T this is what user wants so it involves or it in it invokes uh the business Logic for that it may be loading the file present at that path on the machine it could be making a call to the database and get the data or in case if the request is malformed and URL does not exist you return an error once it is done processing and compiling the response in most cases it would be an HTML response then it gets this HTML wraps it in an HTTP response and sends it back so the response is a protocol specification which says HTTP 1.1 200 okay content equal to text/html content L equal to 2092 which means the bodies 2092 and sends it back now this is a HTML response that we got once browser gets this response it renders it on the UI so when server receives a message it processes depending on the business logic does its activity compiles the response creates this HTML sorry uh creates HTTP response format message sends it back to the client once client gets it it again does the same thing upon receiving the response it basically passes the response says that this is a status code which means everything went okay content typ is text/html which means I want to render this as an HTML page on my UI content length is 2092 this is the actual HTML body upon receiving it browser understood that whatever is in the body is an HTML thing I want to render it which is where the nice HTML UI typically kicks in and this is the total length total number of bytes I would want to read and it renders it on the UI right now in case let's say it send content type SL application SL PDF which your browser does not know how to render so in that case your browser downloads the file so you see you click on certain file and it downloads it instead of opening it because your browser does not know how to handle that file so browser typically downloads it in this case because a browser knows how to handle text/html it can render the HTML on the browser once when the HTML is rendered the HTML might contain linked CSS files IMG text to render images some inline JavaScript code and whatnot so for the linked CSS file it makes a call again a get call on that path to load the CSS file and execute on that machine so again it goes to the exact same flow that I said fire HTTP get request on that URL gets the response the response contains the CSS content and your browser renders it IMG tag same thing goes loads the image renders it in the UI for inline JavaScript code it starts executing in the v runtime engine that your Chrome has and it may involve subsequent API calls load me information authentication and whatnot so again wherever you see this HTTP call happening this is what is happening behind the scenes right and this is typically what happens when you hit a URL in your browser right this is a very 10,000 ft view over next few videos we'll go deeper into each one of the step we'll start with writing our own DNS server to understand how things function what the protocol is but this overall helps us understand what like something that we take for granted typing a URL getting a response behind the scene there's a lot of heavy duty that the entire internet your browser the servers are doing it for us and I hope you found it interesting hope you found it amusing that's it for this one I'll see you in the next one [Music] thanks [Music]