so we all use the word protocol often but what exactly is it HTTP is the most common protocol out there that we use every day while surfing the internet writing backend apis or consuming those apis in our application but how does it look in this video we go deep and understand what protocols really are what is an HTTP protocol how it looks and what it takes for you to write your own protocol from scratch so becoming a better engineer is the need of the r and to help you all reach the next level I have something that you will find amusing I conduct super practical courses with a non-nonsense approach these courses are designed to help you become a better engineer and Ace your career the courses will definitely reignite your love for engineering and Spark the much needed engineering curiosity some of my most popular courses are on system design and database internals because I operate with a nolu approach my courses are enrolled by folks across all levels from sd1 to tech leads to staff to EMS to VP engineering of some of the most prominent companies out there all the details about the courses like curriculum prerequisites testimonals FAQs can be found on the course pages and I have linked them in the description down below so do check them out and I cannot wait to see you all become better engineers and a your engineering career now let's go back to the video so whenever two machines connected over a network want to talk to each other they establish a TCP connection among them right but how would B understand what a wants right so there needs to be a common language that A and B both agrees on for example I am communicating in English you are able to comprehend it so you are able to understand what I'm talking about so for example if I specify a language basically a protocol which says that I would pass in a sentence called add Space 2 space three followed by a slasher when you see this break it down by space the first word is a command the subsequent words are its arguments so then you exactly know that when I get add Space 2 space 3/n you would know that you are requesting to add the numbers two and three and in the response you're supposed to send the result followed by a slend so you send five slash right so this is a protocol here we just defined a protocol that says that the everything will be space separated the first word will be the command the subsequent word will be the arguments and the response will be a single word followed by a slashing by the way this exactly is RP which is red serialization protocol version one right so when you want to set key in redis you do set key comma value or key space value you pass in those arguments in this format right now how is this related to http here the core idea is HTTP is also a protocol in which the specification says that your client will always initiate the TCP connection with the server and client will request for something and server will respond so on this thing it is established so whenever client is requesting something it should look like it should be able to convey what it is requesting for so the format goes like this the http speciic ification says that the first thing that you would pass in is the HTTP method the verb get put post delete followed by a space followed by the URL that you want say slash Fu followed by a space followed by the HTTP protocol which is http/1.1 followed by a/ r/n when you literally send this message over the TCP connection to the server if the server is is a web server it would understand the HTTP protocol which means it would understand this string that a client is requesting is firing a get method on this URL and the specification is 1.1 and server you would have the business Logic on the server it would understand what needs to be done in this case fetch this URL like either call the API the function that handles this URL in this case load the file from the dis send it back to the user or do some computation send it back to the US user and you respond back right let's take a quick demo on how this actually looks like so I have a very simple code written in goine and just I've just run my HTTP web server in the second uh in the second terminal that you see in the first one what I'll do is I'll fire some HTTP request we typically fire HTTP request as Cur request we fire curl space the URL and it makes a get request on the URL we get the response right but but we not be using C so let's first take a look on what my server looks like so I have a function called SL Fu when I call SL Fu it literally just prints all the headers in it and writes bar as a response right so first let's see what curl response curl space HTTP col localhost colon 1729 on the method SL and in response I get bar right it's working fine right now what do we do instead of of doing this what we want to do is we want to write the HTTP specification so I would literally create a raw TCP connection Local Host 1729 literally a raw TCP connection from this terminal to my server and now I want to fire the exact TCP message that we spoke about the specification set the first thing would be the method so I'm making a get request on/ F followed by HTTP specification http / 1.1 followed by a/r /n and the end of message is one more new line but it gave me an error this error is looks very similar to an HTTP response HTTP 1.1 400 bad request missing required host header now who is emitting this error this error is emitted by the goang inbuilt HTTP server that I'm starting that it is requiring us to pass the host header so we need to pass in that header now how do we do that in HTTP specification when I want to pass in a header so I just need to end it with 172 9 I pass get Space SL f/ http/1.1 enter and post which I have to pass in headers as key colon value so it required me to pass pass the host header here so I'll pass the host header host colon I'll just pass anything let's say I pass Local Host and I do enter enter and I got bar it's looking like an HTTP response HTTP 200 okay date this content length three content type text plane and I got bar in response right so I was able to fire over a raw TCP connection a request with a get method on this URL with this protocol host Local Host enter and it gave me a response a genuine HTTP response so if I open and this is exactly the request that your browser sends so if I open this URL in my browser Local Host col 1729 F I would literally be seeing bar as a text there because a browser knows how to render it right now this is how your get looks like now here we saw literally on a raw TCP connection what happened when I made a call now let's say we don't do get and all let's say I pass in random stuff I pass in let's say F Bar ABC D it's not protocol HTTP specification let's see what happens your browser or sorry your server was unable to interpret so it respond back bad request right because it is not the HTTP specification so it said bad request right and again it's a code which is return inside the default HTTP web server that is there right that's why now obviously we are not just making a get request we also want to make post request so what post specification says is I have a function called SL login in which I pass in uh the body and I just print login successful and I'm just printing the body over here right so now let's look at how we send the body in the request so I make the post space slash login space protocol 1.1 space header it wanted the host header the go HTTP web server wanted the host header so we pass that right then we hit enter then we hit one more enter so what HTTP specification HTTP specification says is after this one enter so that you distinguish that headers are complete and then you start to type body but what happened I hit enter and and it emitted the response login successful it did not give us a chance to pass body because the server does not know we were going to send the body how would server know that it needs to wait for us to send the body so which is where you see us passing the header content length so post SL login space http/1.1 enter host colon Local Host enter content content length is something let's say I pass in content length equal to 28 right and then what I would do is I would pass in the content length 28 and now it is waiting for me to pass the body and the body is let's say pass in user equal to arit m per password equal to pass I hope this is 28 I hit enter I hit enter it's it was not 28 it required me to pass in few more things but you get it right and as soon as the 28 characters finished the 28 bytes finished as an input it responded me with login successful and on the right hand side you can see that it C it captured the body that we wanted it to capture so body header content length value 28 body user equal to Earth password equal to pass right so this is the actual HTTP specification the the folks from the Cs background would have studied in the networking course but this is exactly what is happening over the TCP connection so we are literally establishing a raw TCP connection and then passing the HTTP messages messages formatted in the HTTP specification so that your server understands it right and this was dead simple for us to implement now let's go I wanted to cover a couple of more points which are of your interest like how would you write your own specific so what exactly is a protocol here so we saw that how body looked like right and we added so we typically see another famous header called content type when we pass in content type as text plane or application SL Json your server looking at that header understands that uh whatever body I'm getting is of type plain text or is of type Json and then it does its parsing and also Express framework does the parsing of it and creates a nice object for you right or in flask you do request. Json and you get that right that's what happens so you can Define your own protocol like how HTTP is a specification we spoke about RP now this is what your Red's first specification was that whenever a client wanted to talk to Redd server it had to establish the TCP connection and had to fire set space key space value and hit enter over there right this was the protocol specific now it has changed RP V2 has come in but this is how its initial protocol look like now you can write your own Protocol no one stopping from you right no one stopping you from writing your it's just that it should be something that your client knows how to format if let's say you want it to be supported by your browser then a browser needs to know that hey this is how I want to format it and S HTTP is a global standard that when you hit on the browser ww w.f face.com enter that the browser is actually using the HTTP specification crafting the message that I showed you sorry first is establishes the connection with the server facebook.com once the TCP connection is established then it compiles the request as the HTTP specification message that we saw it sends a message the Facebook server receives the message creates the response emits the response to the client and client if it is a browser it would render it in the UI so this is what is happening behind the now if you want to write your own protocol specification either so you need to write the client because it's not well adopted right now but it's a language that your server that your client is formatting the message in and the server is able to interpret the message like how I spoke about add Space 2 space three that's your protocol you may choose to implement protocol however you want so if it is not globally accepted protocol then you have to write your own client which is why you see databases having their own sdks for example you want to talk to my SQL it has its own you have to install its driver or you have to install its package what is it doing you're firing SQL query but how is that SQL query captured how is that SQL query sent to the server server understanding it responding back and how your client understands the response this is what specification is this is what protocol is right so you need to write server that understands the protocol client formats the message in that protocol and sends it to the server so so long as you are able to write the encoders and the decoders or the translators of it your the process like the specification of it that you are adhering to others might not use it but you are writing your own layer so that your client can talk to your server HTTP is a global specification that's why we see everybody using it but you can choose to write your own no one stopping you right similarly you would have heard of HTTP 2 HTTP 3 these are different specifications built on top of it on how you are creating a message sending it to server server interpreting it and doing what it requires it to do right and this is very brief about the protocol specification now when you hear the term protocol don't be over like oh my God what is these guys talking about protocol is just a way just a Common Language a common format that two machines understand and they talk to each other right that's what protocol is and yeah these are what I wanted to cover in this one I hope you found it interesting hope you found it aming that's it for this one I'll see you in the next one thanks [Music] up